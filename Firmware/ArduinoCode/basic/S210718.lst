# file opened: S210718.asm
  1   0000              ;**********************************************************************************
  2   0000              ;
  3   0000              ; Z80-MBC2 uBIOS for Basic - S210718 - HW ref: A040618
  4   0000              ;
  5   0000              ; Adapted from Grant Searle great work!
  6   0000              ;
  7   0000              ;
  8   0000              ; NOTE: all changes in the following code are marked with this string "Z80-MBC2:" in the comment
  9   0000              ;       (the basic.asm file is not modified)
 10   0000              ;
 11   0000              ;**********************************************************************************
 12   0000              ;==================================================================================
 13   0000              ; Contents of this file are copyright Grant Searle
 14   0000              ;
 15   0000              ; You have permission to use this for NON COMMERCIAL USE ONLY
 16   0000              ; If you wish to use it elsewhere, please include an acknowledgement to myself.
 17   0000              ;
 18   0000              ; http://searle.hostei.com/grant/index.html
 19   0000              ;
 20   0000              ; eMail: home.micros01@btinternet.com
 21   0000              ;
 22   0000              ; If the above don't work, please perform an Internet search to see if I have
 23   0000              ; updated the web page hosting service.
 24   0000              ;
 25   0000              ;==================================================================================
 26   0000
 27   0000              ; Minimum 6850 ACIA interrupt driven serial I/O to run modified NASCOM Basic 4.7
 28   0000              ; Full input buffering with incoming data hardware handshaking
 29   0000              ; Handshake shows full before the buffer is totally filled to allow run-on from the sender
 30   0000
 31   0000              SER_BUFSIZE     .EQU     3FH
 32   0000              SER_FULLSIZE    .EQU     30H
 33   0000              SER_EMPTYSIZE   .EQU     5
 34   0000
 35   0000              RTS_HIGH        .EQU     0D6H
 36   0000              RTS_LOW         .EQU     096H
 37   0000
 38   0000              serBuf          .EQU     $2000
 39   0000              serInPtr        .EQU     serBuf+SER_BUFSIZE
 40   0000              serRdPtr        .EQU     serInPtr+2
 41   0000              serBufUsed      .EQU     serRdPtr+2
 42   0000              basicStarted    .EQU     serBufUsed+1
 43   0000              TEMPSTACK       .EQU     $20ED ; Top of BASIC line input buffer so is "free ram" when BASIC resets
 44   0000
 45   0000              CR              .EQU     0DH
 46   0000              LF              .EQU     0AH
 47   0000              CS              .EQU     0CH             ; Clear screen
 48   0000                              output "S210718.bin", t
 49   0000                              .ORG $0000
 50   0000              ;------------------------------------------------------------------------------
 51   0000              ; Reset
 52   0000
 53   0000 F3           RST00           DI                       ;Disable interrupts
 54   0001 C3 A8 00                     JP       INIT            ;Initialize Hardware and go
 55   0004
 56   0004              ;------------------------------------------------------------------------------
 57   0004              ; TX a character over RS232
 58   0004 00 00 00 00                   BLOCK 4, 0
 59   0008
 60   0008                              .ORG     0008H
 61   0008 C3 91 00     RST08            JP      TXA
 62   000B
 63   000B              ;------------------------------------------------------------------------------
 64   000B              ; RX a character over RS232 Channel A [Console], hold here until char ready.
 65   000B 00 00 00...                  BLOCK 5, 0
 66   0010                              .ORG 0010H
 67   0010 C3 6A 00     RST10            JP      RXA
 68   0013
 69   0013              ;------------------------------------------------------------------------------
 70   0013              ; Check serial status
 71   0013 00 00 00...                  BLOCK 5, 0
 72   0018                              .ORG 0018H
 73   0018 C3 9A 00     RST18            JP      CKINCHAR
 74   001B
 75   001B              ;------------------------------------------------------------------------------
 76   001B              ; RST 38 - INTERRUPT VECTOR [ for IM 1 ]
 77   001B 00 00 00...                  BLOCK 29, 0
 78   0038                              .ORG     0038H
 79   0038 18 00        RST38            JR      serialInt
 80   003A
 81   003A              ;------------------------------------------------------------------------------
 82   003A F5           serialInt:      PUSH     AF
 83   003B E5                           PUSH     HL
 84   003C
 85   003C                              ;IN       A,($80)         ; Z80-MBC2: No buffer full to check here
 86   003C                              ;AND      $01             ; Check if interupt due to read buffer full
 87   003C                              ;JR       Z,rts0          ; if not, ignore
 88   003C
 89   003C DB 01                        IN       A,($01)         ; Z80-MBC2: Changed port addr from $81 to $01
 90   003E F5                           PUSH     AF
 91   003F 3A 43 20                     LD       A,(serBufUsed)
 92   0042 FE 3F                        CP       SER_BUFSIZE     ; If full then ignore
 93   0044 20 03                        JR       NZ,notFull
 94   0046 F1                           POP      AF
 95   0047 18 1C                        JR       rts0
 96   0049
 97   0049 2A 3F 20     notFull:        LD       HL,(serInPtr)
 98   004C 23                           INC      HL
 99   004D 7D                           LD       A,L             ; Only need to check low byte becasuse buffer<256 bytes
100   004E FE 3F                        CP       (serBuf+SER_BUFSIZE) & $FF
101   0050 20 03                        JR       NZ, notWrap
102   0052 21 00 20                     LD       HL,serBuf
103   0055 22 3F 20     notWrap:        LD       (serInPtr),HL
104   0058 F1                           POP      AF
105   0059 77                           LD       (HL),A
106   005A 3A 43 20                     LD       A,(serBufUsed)
107   005D 3C                           INC      A
108   005E 32 43 20                     LD       (serBufUsed),A
109   0061 FE 30                        CP       SER_FULLSIZE
110   0063 38 00                        JR       C,rts0
111   0065                              ;LD       A,RTS_HIGH     ; Z80-MBC2: No RTS HW handshackig here
112   0065                              ;OUT      ($80),A
113   0065 E1           rts0:           POP      HL
114   0066 F1                           POP      AF
115   0067 FB                           EI
116   0068 ED 4D                        RETI
117   006A
118   006A              ;------------------------------------------------------------------------------
119   006A              RXA:
120   006A 3A 43 20     waitForChar:    LD       A,(serBufUsed)
121   006D FE 00                        CP       $00
122   006F 28 F9                        JR       Z, waitForChar
123   0071 E5                           PUSH     HL
124   0072 2A 41 20                     LD       HL,(serRdPtr)
125   0075 23                           INC      HL
126   0076 7D                           LD       A,L             ; Only need to check low byte becasuse buffer<256 bytes
127   0077 FE 3F                        CP       (serBuf+SER_BUFSIZE) & $FF
128   0079 20 03                        JR       NZ, notRdWrap
129   007B 21 00 20                     LD       HL,serBuf
130   007E F3           notRdWrap:      DI
131   007F 22 41 20                     LD       (serRdPtr),HL
132   0082 3A 43 20                     LD       A,(serBufUsed)
133   0085 3D                           DEC      A
134   0086 32 43 20                     LD       (serBufUsed),A
135   0089 FE 05                        CP       SER_EMPTYSIZE
136   008B 30 00                        JR       NC,rts1
137   008D                              ;LD       A,RTS_LOW       ; Z80-MBC2: No RTS HW handshackig here
138   008D                              ;OUT      ($80),A
139   008D              rts1:
140   008D 7E                           LD       A,(HL)
141   008E FB                           EI
142   008F E1                           POP      HL
143   0090 C9                           RET                      ; Char ready in A
144   0091
145   0091              ;------------------------------------------------------------------------------
146   0091              TXA:
147   0091 F5           conout1:        PUSH     AF              ; Store character
148   0092              				;IN       A,($80)         ; Z80-MBC2: No TX status needed here ;Status byte
149   0092                              ;BIT      1,A             ; Set Zero flag if still transmitting character
150   0092                              ;JR       Z,conout1       ; Loop until flag signals ready
151   0092                              ; LD       A,$01           ; Z80-MBC2: (Added) A = Serial TX Operation Code
152   0092 00                           nop
153   0093 00                           nop
154   0094                              ; OUT      ($01),A         ; Z80-MBC2: (Added) Write the Serial TX Opcode to IOS
155   0094 00                           nop
156   0095 00                           nop
157   0096 F1                           POP      AF              ; Retrieve character
158   0097 D3 01                        OUT      ($01),A         ; Z80-MBC2: Changed port addr from $81 to $01 ; Output the character
159   0099 C9                           RET
160   009A
161   009A              ;------------------------------------------------------------------------------
162   009A 3A 43 20     CKINCHAR        LD       A,(serBufUsed)
163   009D FE 00                        CP       $0
164   009F C9                           RET
165   00A0
166   00A0 7E           PRINT:          LD       A,(HL)          ; Get character
167   00A1 B7                           OR       A               ; Is it $00 ?
168   00A2 C8                           RET      Z               ; Then RETurn on terminator
169   00A3 CF                           RST      08H             ; Print it
170   00A4 23                           INC      HL              ; Next Character
171   00A5 18 F9                        JR       PRINT           ; Continue until $00
172   00A7 C9                           RET
173   00A8              ;------------------------------------------------------------------------------
174   00A8              INIT:
175   00A8 21 ED 20                    LD        HL,TEMPSTACK    ; Temp stack
176   00AB F9                          LD        SP,HL           ; Set up a temporary stack
177   00AC 21 00 20                    LD        HL,serBuf
178   00AF 22 3F 20                    LD        (serInPtr),HL
179   00B2 22 41 20                    LD        (serRdPtr),HL
180   00B5 AF                          XOR       A               ;0 to accumulator
181   00B6 32 43 20                    LD        (serBufUsed),A
182   00B9                             ;LD        A,RTS_LOW       ; Z80-MBC2: Nothing to initialize
183   00B9                             ;OUT       ($80),A         ; Initialise ACIA
184   00B9 ED 56                       IM        1
185   00BB FB                          EI
186   00BC 21 F5 00                    LD        HL,SIGNON1      ; Sign-on message
187   00BF CD A0 00                    CALL      PRINT           ; Output string
188   00C2 3A 44 20                    LD        A,(basicStarted); Check the BASIC STARTED flag
189   00C5 FE 59                       CP        'Y'             ; to see if this is power-up
190   00C7 20 16                       JR        NZ,COLDSTART    ; If not BASIC started then always do cold start
191   00C9 21 2B 01                    LD        HL,SIGNON2      ; Cold/warm message
192   00CC CD A0 00                    CALL      PRINT           ; Output string
193   00CF              CORW:
194   00CF CD 6A 00                    CALL      RXA
195   00D2 E6 DF                       AND       %11011111       ; lower to uppercase
196   00D4 FE 43                       CP        'C'
197   00D6 20 0F                       JR        NZ, CHECKWARM
198   00D8 CF                          RST       08H
199   00D9 3E 0D                       LD        A,$0D
200   00DB CF                          RST       08H
201   00DC 3E 0A                       LD        A,$0A
202   00DE CF                          RST       08H
203   00DF 3E 59        COLDSTART:     LD        A,'Y'           ; Set the BASIC STARTED flag
204   00E1 32 44 20                    LD        (basicStarted),A
205   00E4 C3 50 01                    JP        $0150           ; Start BASIC COLD
206   00E7              CHECKWARM:
207   00E7 FE 57                       CP        'W'
208   00E9 20 E4                       JR        NZ, CORW
209   00EB CF                          RST       08H
210   00EC 3E 0D                       LD        A,$0D
211   00EE CF                          RST       08H
212   00EF 3E 0A                       LD        A,$0A
213   00F1 CF                          RST       08H
214   00F2 C3 53 01                    JP        $0153           ; Start BASIC WARM
215   00F5
216   00F5              SIGNON1:       ;.BYTE     CS              ; Z80-MBC2: Changed SIGNON1 string
217   00F5 75 42 49 4F                 .BYTE     "uBIOS - S210718 (Adapted from Z80 SBC by G. Searle)",CR,LF,0
217   00F9 53 20 2D 20
217   00FD 53 32 31 30
217   0101 37 31 38 20
217   0105 28 41 64 61
217   0109 70 74 65 64
217   010D 20 66 72 6F
217   0111 6D 20 5A 38
217   0115 30 20 53 42
217   0119 43 20 62 79
217   011D 20 47 2E 20
217   0121 53 65 61 72
217   0125 6C 65 29 0D
217   0129 0A 00
218   012B 0D 0A        SIGNON2:       .BYTE     CR,LF            ; Z80-MBC2: Changed SIGNON2 string
219   012D 75 42 49 4F                 .BYTE     "uBIOS: Cold or warm start (C/W)?",0
219   0131 53 3A 20 43
219   0135 6F 6C 64 20
219   0139 6F 72 20 77
219   013D 61 72 6D 20
219   0141 73 74 61 72
219   0145 74 20 28 43
219   0149 2F 57 29 3F
219   014D 00
220   014E
221   014E 00                          nop
222   014F                             .org      $14f            ; Z80-MBC2: Last byte for this uBIOS (BASIC starts next one)!
223   014F 00           LastByte:      .byte     $00
224   0150
225   0150                             .END
# file closed: S210718.asm
